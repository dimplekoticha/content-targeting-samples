/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.content.targeting.rule.mail.keywords.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.content.targeting.rule.mail.keywords.model.KeywordMatch;
import com.liferay.content.targeting.rule.mail.keywords.model.KeywordMatchModel;
import com.liferay.content.targeting.rule.mail.keywords.model.KeywordMatchSoap;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the KeywordMatch service. Represents a row in the &quot;CT_MK_KeywordMatch&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link KeywordMatchModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link KeywordMatchImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see KeywordMatchImpl
 * @see KeywordMatch
 * @see KeywordMatchModel
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class KeywordMatchModelImpl extends BaseModelImpl<KeywordMatch>
	implements KeywordMatchModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a keyword match model instance should use the {@link KeywordMatch} interface instead.
	 */
	public static final String TABLE_NAME = "CT_MK_KeywordMatch";
	public static final Object[][] TABLE_COLUMNS = {
			{ "keywordMatchId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "anonymousUserId", Types.BIGINT },
			{ "ruleInstanceId", Types.BIGINT }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("keywordMatchId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("anonymousUserId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("ruleInstanceId", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE = "create table CT_MK_KeywordMatch (keywordMatchId LONG not null primary key,companyId LONG,modifiedDate DATE null,anonymousUserId LONG,ruleInstanceId LONG)";
	public static final String TABLE_SQL_DROP = "drop table CT_MK_KeywordMatch";
	public static final String ORDER_BY_JPQL = " ORDER BY keywordMatch.anonymousUserId DESC";
	public static final String ORDER_BY_SQL = " ORDER BY CT_MK_KeywordMatch.anonymousUserId DESC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.content.targeting.rule.mail.keywords.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.com.liferay.content.targeting.rule.mail.keywords.model.KeywordMatch"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.content.targeting.rule.mail.keywords.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.com.liferay.content.targeting.rule.mail.keywords.model.KeywordMatch"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.content.targeting.rule.mail.keywords.service.util.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.liferay.content.targeting.rule.mail.keywords.model.KeywordMatch"),
			true);
	public static final long ANONYMOUSUSERID_COLUMN_BITMASK = 1L;
	public static final long RULEINSTANCEID_COLUMN_BITMASK = 2L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static KeywordMatch toModel(KeywordMatchSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		KeywordMatch model = new KeywordMatchImpl();

		model.setKeywordMatchId(soapModel.getKeywordMatchId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setAnonymousUserId(soapModel.getAnonymousUserId());
		model.setRuleInstanceId(soapModel.getRuleInstanceId());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<KeywordMatch> toModels(KeywordMatchSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<KeywordMatch> models = new ArrayList<KeywordMatch>(soapModels.length);

		for (KeywordMatchSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.content.targeting.rule.mail.keywords.service.util.ServiceProps.get(
				"lock.expiration.time.com.liferay.content.targeting.rule.mail.keywords.model.KeywordMatch"));

	public KeywordMatchModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _keywordMatchId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setKeywordMatchId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _keywordMatchId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return KeywordMatch.class;
	}

	@Override
	public String getModelClassName() {
		return KeywordMatch.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("keywordMatchId", getKeywordMatchId());
		attributes.put("companyId", getCompanyId());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("anonymousUserId", getAnonymousUserId());
		attributes.put("ruleInstanceId", getRuleInstanceId());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long keywordMatchId = (Long)attributes.get("keywordMatchId");

		if (keywordMatchId != null) {
			setKeywordMatchId(keywordMatchId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		Long anonymousUserId = (Long)attributes.get("anonymousUserId");

		if (anonymousUserId != null) {
			setAnonymousUserId(anonymousUserId);
		}

		Long ruleInstanceId = (Long)attributes.get("ruleInstanceId");

		if (ruleInstanceId != null) {
			setRuleInstanceId(ruleInstanceId);
		}
	}

	@JSON
	@Override
	public long getKeywordMatchId() {
		return _keywordMatchId;
	}

	@Override
	public void setKeywordMatchId(long keywordMatchId) {
		_keywordMatchId = keywordMatchId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_companyId = companyId;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public long getAnonymousUserId() {
		return _anonymousUserId;
	}

	@Override
	public void setAnonymousUserId(long anonymousUserId) {
		_columnBitmask = -1L;

		if (!_setOriginalAnonymousUserId) {
			_setOriginalAnonymousUserId = true;

			_originalAnonymousUserId = _anonymousUserId;
		}

		_anonymousUserId = anonymousUserId;
	}

	@Override
	public String getAnonymousUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getAnonymousUserId());

			return user.getUuid();
		}
		catch (PortalException pe) {
			return StringPool.BLANK;
		}
	}

	@Override
	public void setAnonymousUserUuid(String anonymousUserUuid) {
	}

	public long getOriginalAnonymousUserId() {
		return _originalAnonymousUserId;
	}

	@JSON
	@Override
	public long getRuleInstanceId() {
		return _ruleInstanceId;
	}

	@Override
	public void setRuleInstanceId(long ruleInstanceId) {
		_columnBitmask |= RULEINSTANCEID_COLUMN_BITMASK;

		if (!_setOriginalRuleInstanceId) {
			_setOriginalRuleInstanceId = true;

			_originalRuleInstanceId = _ruleInstanceId;
		}

		_ruleInstanceId = ruleInstanceId;
	}

	public long getOriginalRuleInstanceId() {
		return _originalRuleInstanceId;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			KeywordMatch.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public KeywordMatch toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (KeywordMatch)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		KeywordMatchImpl keywordMatchImpl = new KeywordMatchImpl();

		keywordMatchImpl.setKeywordMatchId(getKeywordMatchId());
		keywordMatchImpl.setCompanyId(getCompanyId());
		keywordMatchImpl.setModifiedDate(getModifiedDate());
		keywordMatchImpl.setAnonymousUserId(getAnonymousUserId());
		keywordMatchImpl.setRuleInstanceId(getRuleInstanceId());

		keywordMatchImpl.resetOriginalValues();

		return keywordMatchImpl;
	}

	@Override
	public int compareTo(KeywordMatch keywordMatch) {
		int value = 0;

		if (getAnonymousUserId() < keywordMatch.getAnonymousUserId()) {
			value = -1;
		}
		else if (getAnonymousUserId() > keywordMatch.getAnonymousUserId()) {
			value = 1;
		}
		else {
			value = 0;
		}

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof KeywordMatch)) {
			return false;
		}

		KeywordMatch keywordMatch = (KeywordMatch)obj;

		long primaryKey = keywordMatch.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		KeywordMatchModelImpl keywordMatchModelImpl = this;

		keywordMatchModelImpl._originalAnonymousUserId = keywordMatchModelImpl._anonymousUserId;

		keywordMatchModelImpl._setOriginalAnonymousUserId = false;

		keywordMatchModelImpl._originalRuleInstanceId = keywordMatchModelImpl._ruleInstanceId;

		keywordMatchModelImpl._setOriginalRuleInstanceId = false;

		keywordMatchModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<KeywordMatch> toCacheModel() {
		KeywordMatchCacheModel keywordMatchCacheModel = new KeywordMatchCacheModel();

		keywordMatchCacheModel.keywordMatchId = getKeywordMatchId();

		keywordMatchCacheModel.companyId = getCompanyId();

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			keywordMatchCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			keywordMatchCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		keywordMatchCacheModel.anonymousUserId = getAnonymousUserId();

		keywordMatchCacheModel.ruleInstanceId = getRuleInstanceId();

		return keywordMatchCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(11);

		sb.append("{keywordMatchId=");
		sb.append(getKeywordMatchId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", anonymousUserId=");
		sb.append(getAnonymousUserId());
		sb.append(", ruleInstanceId=");
		sb.append(getRuleInstanceId());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(19);

		sb.append("<model><model-name>");
		sb.append(
			"com.liferay.content.targeting.rule.mail.keywords.model.KeywordMatch");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>keywordMatchId</column-name><column-value><![CDATA[");
		sb.append(getKeywordMatchId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>anonymousUserId</column-name><column-value><![CDATA[");
		sb.append(getAnonymousUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>ruleInstanceId</column-name><column-value><![CDATA[");
		sb.append(getRuleInstanceId());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = KeywordMatch.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			KeywordMatch.class
		};
	private long _keywordMatchId;
	private long _companyId;
	private Date _modifiedDate;
	private long _anonymousUserId;
	private long _originalAnonymousUserId;
	private boolean _setOriginalAnonymousUserId;
	private long _ruleInstanceId;
	private long _originalRuleInstanceId;
	private boolean _setOriginalRuleInstanceId;
	private long _columnBitmask;
	private KeywordMatch _escapedModel;
}